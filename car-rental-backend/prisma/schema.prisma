generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CUSTOMER
  AGENT
}

enum Status {
  ACTIVE
  INACTIVE
  PENDING
}

model User {
  id                       String    @id @default(uuid())
  name                     String
  email                    String    @unique
  password                 String
  role                     Role      @default(CUSTOMER)
  Status                   Status    @default(PENDING)
  profileImage             String?   @default("")
  phone                    String?
  emailVerified            Boolean   @default(false)
  emailVerificationToken   String?   @unique
  emailVerificationExpires DateTime?
  passwordResetToken       String?   @unique
  passwordResetExpires     DateTime?
  resetCode                String?
  resetCodeExpires         DateTime?
  lastLoginAt              DateTime?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt

  // Relations
  bookings      Booking[]
  reviews       Review[]
  payments      Payment[]
  refreshTokens RefreshToken[]
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Vehicle {
  id           String   @id @default(uuid())
  model        String
  year         Int
  licensePlate String   @unique
  vin          String   @unique
  category     String // SUV, Sedan, Economy, etc.
  transmission String // Manual, Automatic
  fuelType     String // Gasoline, Diesel, Electric, Hybrid
  seats        Int
  dailyRate    Float
  hourlyRate   Float?
  isAvailable  Boolean  @default(true)
  location     String
  features     String[] // AC, GPS, Bluetooth, etc.
  images       String[]
  description  String?
  mileage      Int?
  status       String   @default("ACTIVE") // ACTIVE, MAINTENANCE, OUT_OF_SERVICE
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  bookings Booking[]
  reviews  Review[]
}

model Booking {
  id             String   @id @default(uuid())
  userId         String
  vehicleId      String
  startDate      DateTime
  endDate        DateTime
  totalAmount    Float
  status         String   @default("PENDING") // PENDING, CONFIRMED, CANCELLED, COMPLETED
  pickupLocation String
  returnLocation String
  notes          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  user     User      @relation(fields: [userId], references: [id])
  vehicle  Vehicle   @relation(fields: [vehicleId], references: [id])
  payments Payment[]
}

model Payment {
  id            String        @id @default(uuid())
  bookingId     String
  userId        String
  amount        Float
  currency      String        @default("USD")
  paymentMethod String // Stripe, PayPal, etc.
  paymentStatus PaymentStatus @default(PENDING)
  transactionId String?       @unique
  receiptUrl    String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  booking Booking @relation(fields: [bookingId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
}

model Review {
  id         String   @id @default(uuid())
  userId     String
  vehicleId  String
  bookingId  String?
  rating     Int // 1-5 stars
  comment    String?
  isApproved Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id])
  vehicle Vehicle @relation(fields: [vehicleId], references: [id])
}

model Location {
  id        String   @id @default(uuid())
  name      String
  address   String
  city      String
  state     String
  country   String
  zipCode   String
  phone     String?
  email     String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Coupon {
  id            String   @id @default(uuid())
  code          String   @unique
  discountType  String // PERCENTAGE, FIXED_AMOUNT
  discountValue Float
  minAmount     Float?
  maxDiscount   Float?
  usageLimit    Int?
  usedCount     Int      @default(0)
  validFrom     DateTime
  validUntil    DateTime
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum fuelType {
  PETROL
  DIESEL
  GASOLINE
  ELECTRIC
  HYBRID
  LPG
  BIOFUEL
}

enum transmissionType {
  AUTOMATIC
  MANUAL
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum VehicleStatus {
  ACTIVE
  MAINTENANCE
  OUT_OF_SERVICE
}

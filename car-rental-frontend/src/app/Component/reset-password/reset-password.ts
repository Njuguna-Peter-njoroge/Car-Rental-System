import { Component, OnInit } from "@angular/core"; import { CommonModule } from "@angular/common"; import { FormsModule, ReactiveFormsModule, FormBuilder, FormGroup, Validators } from "@angular/forms"; import { ActivatedRoute, Router } from "@angular/router"; import { HttpClient } from "@angular/common/http"; @Component({ selector: "app-reset-password", standalone: true, imports: [CommonModule, FormsModule, ReactiveFormsModule], template: `<div style="display: flex; justify-content: center; align-items: center; min-height: 100vh; background: #f5f5f5; padding: 1rem;"><div style="background: white; border: 1px solid #ddd; border-radius: 8px; padding: 2rem; max-width: 400px; width: 100%;"><h2 style="text-align: center; color: #333; margin-bottom: 1.5rem;">Reset Password</h2><div *ngIf="!token" style="color: #dc3545; background: #f8d7da; border: 1px solid #f5c6cb; padding: 0.75rem; border-radius: 4px; margin: 1rem 0;">Invalid or missing reset token. Please request a new password reset.</div><form *ngIf="token" [formGroup]="resetForm" (ngSubmit)="onSubmit()" style="display: flex; flex-direction: column; gap: 1rem;"><div style="display: flex; flex-direction: column; gap: 0.5rem;"><label style="font-weight: 600; color: #555;">New Password</label><input type="password" formControlName="newPassword" placeholder="Enter new password" style="padding: 0.75rem; border: 1px solid #ddd; border-radius: 4px; font-size: 1rem;" /></div><div style="display: flex; flex-direction: column; gap: 0.5rem;"><label style="font-weight: 600; color: #555;">Confirm Password</label><input type="password" formControlName="confirmPassword" placeholder="Confirm new password" style="padding: 0.75rem; border: 1px solid #ddd; border-radius: 4px; font-size: 1rem;" /></div><button type="submit" style="background: #007bff; color: white; border: none; padding: 0.75rem; border-radius: 4px; font-size: 1rem; cursor: pointer;" [disabled]="isLoading || !resetForm.valid"><span *ngIf="!isLoading">Reset Password</span><span *ngIf="isLoading">Resetting...</span></button></form><div *ngIf="errorMessage" style="color: #dc3545; background: #f8d7da; border: 1px solid #f5c6cb; padding: 0.75rem; border-radius: 4px; margin: 1rem 0;">{{ errorMessage }}</div><div *ngIf="successMessage" style="color: #155724; background: #d4edda; border: 1px solid #c3e6cb; padding: 0.75rem; border-radius: 4px; margin: 1rem 0;">{{ successMessage }}</div><div style="text-align: center; margin-top: 1rem;"><a routerLink="/auth" style="color: #007bff; text-decoration: none;">Back to Login</a></div></div></div>` }) export class ResetPasswordComponent implements OnInit { resetForm: FormGroup; token: string | null = null; isLoading = false; errorMessage = ""; successMessage = ""; constructor(private fb: FormBuilder, private route: ActivatedRoute, private router: Router, private http: HttpClient) { this.resetForm = this.fb.group({ newPassword: ["", [Validators.required, Validators.minLength(8)]], confirmPassword: ["", [Validators.required]] }, { validators: this.passwordMatchValidator }); } ngOnInit(): void { this.token = this.route.snapshot.queryParams["token"]; if (!this.token) { this.errorMessage = "Invalid or missing reset token. Please request a new password reset."; } } private passwordMatchValidator(form: FormGroup): { [key: string]: boolean } | null { const password = form.get("newPassword"); const confirmPassword = form.get("confirmPassword"); if (password && confirmPassword && password.value !== confirmPassword.value) { return { passwordMismatch: true }; } return null; } onSubmit(): void { if (this.resetForm.valid && this.token) { this.isLoading = true; this.errorMessage = ""; this.successMessage = ""; const resetData = { token: this.token, newPassword: this.resetForm.value.newPassword }; this.http.post("http://localhost:3000/auth/reset-password", resetData).subscribe({ next: (response: any) => { this.isLoading = false; this.successMessage = "Password reset successful! Redirecting to login..."; setTimeout(() => { this.router.navigate(["/auth"]); }, 2000); }, error: (error) => { this.isLoading = false; this.errorMessage = error.error?.message || "Failed to reset password. Please try again."; } }); } } }
